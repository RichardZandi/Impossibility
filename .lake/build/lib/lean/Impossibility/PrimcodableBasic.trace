{"log":
 [{"message":
   ".> LEAN_PATH=/Users/richardzandi/Impossibility/.lake/packages/Cli/.lake/build/lib/lean:/Users/richardzandi/Impossibility/.lake/packages/batteries/.lake/build/lib/lean:/Users/richardzandi/Impossibility/.lake/packages/Qq/.lake/build/lib/lean:/Users/richardzandi/Impossibility/.lake/packages/aesop/.lake/build/lib/lean:/Users/richardzandi/Impossibility/.lake/packages/proofwidgets/.lake/build/lib/lean:/Users/richardzandi/Impossibility/.lake/packages/importGraph/.lake/build/lib/lean:/Users/richardzandi/Impossibility/.lake/packages/LeanSearchClient/.lake/build/lib/lean:/Users/richardzandi/Impossibility/.lake/packages/plausible/.lake/build/lib/lean:/Users/richardzandi/Impossibility/.lake/packages/mathlib/.lake/build/lib/lean:/Users/richardzandi/Impossibility/.lake/packages/godelnumbering/.lake/build/lib/lean:/Users/richardzandi/Impossibility/.lake/packages/Kleene2/.lake/build/lib/lean:/Users/richardzandi/Impossibility/.lake/build/lib/lean /Users/richardzandi/.elan/toolchains/leanprover--lean4---v4.20.0/bin/lean /Users/richardzandi/Impossibility/Impossibility/PrimcodableBasic.lean -R /Users/richardzandi/Impossibility -o /Users/richardzandi/Impossibility/.lake/build/lib/lean/Impossibility/PrimcodableBasic.olean -i /Users/richardzandi/Impossibility/.lake/build/lib/lean/Impossibility/PrimcodableBasic.ilean -c /Users/richardzandi/Impossibility/.lake/build/ir/Impossibility/PrimcodableBasic.c --json",
   "level": "trace"},
  {"message":
   "/Users/richardzandi/Impossibility/Impossibility/PrimcodableBasic.lean:25:2: try 'simp' instead of 'simpa'\nnote: this linter can be disabled with `set_option linter.unnecessarySimpa false`",
   "level": "warning"},
  {"message":
   "/Users/richardzandi/Impossibility/Impossibility/PrimcodableBasic.lean:28:2: try 'simp' instead of 'simpa'\nnote: this linter can be disabled with `set_option linter.unnecessarySimpa false`",
   "level": "warning"},
  {"message":
   "/Users/richardzandi/Impossibility/Impossibility/PrimcodableBasic.lean:143:8: try 'simp' instead of 'simpa'\nnote: this linter can be disabled with `set_option linter.unnecessarySimpa false`",
   "level": "warning"},
  {"message":
   "/Users/richardzandi/Impossibility/Impossibility/PrimcodableBasic.lean:191:12: try 'simp' instead of 'simpa'\nnote: this linter can be disabled with `set_option linter.unnecessarySimpa false`",
   "level": "warning"},
  {"message":
   "/Users/richardzandi/Impossibility/Impossibility/PrimcodableBasic.lean:210:0: (List.rec ⟨0, PUnit.unit⟩\n    (fun head tail tail_ih =>\n      ⟨Decidable.rec\n          (fun h =>\n            (Nat.rec ⟨fun x => x, PUnit.unit⟩ (fun n n_ih => ⟨fun x => (n_ih.1 x).succ, n_ih⟩) tail_ih.1).1\n              ((Nat.rec ⟨fun x => x, PUnit.unit⟩ (fun n n_ih => ⟨fun x => (n_ih.1 x).succ, n_ih⟩)\n                    (Food.rec 0 1 (Person.rec Food.pizza Food.hotdog Food.pizza head))).1\n                ((Nat.rec ⟨fun x => 0, PUnit.unit⟩\n                      (fun n n_ih =>\n                        ⟨fun x =>\n                          (Nat.rec ⟨fun x => x, PUnit.unit⟩ (fun n n_ih => ⟨fun x => (n_ih.1 x).succ, n_ih⟩) x).1\n                            (n_ih.1 x),\n                          n_ih⟩)\n                      (Food.rec 0 1 (Person.rec Food.pizza Food.hotdog Food.pizza head))).1\n                  (Food.rec 0 1 (Person.rec Food.pizza Food.hotdog Food.pizza head)))))\n          (fun h =>\n            (Nat.rec ⟨fun x => x, PUnit.unit⟩ (fun n n_ih => ⟨fun x => (n_ih.1 x).succ, n_ih⟩)\n                  (Food.rec 0 1 (Person.rec Food.pizza Food.hotdog Food.pizza head))).1\n              ((Nat.rec ⟨fun x => 0, PUnit.unit⟩\n                    (fun n n_ih =>\n                      ⟨fun x =>\n                        (Nat.rec ⟨fun x => x, PUnit.unit⟩ (fun n n_ih => ⟨fun x => (n_ih.1 x).succ, n_ih⟩) x).1\n                          (n_ih.1 x),\n                        n_ih⟩)\n                    tail_ih.1).1\n                tail_ih.1))\n          (Decidable.rec (fun h => isFalse ⋯) (fun h => isTrue ⋯)\n            (Bool.rec (isFalse ⋯) (isTrue ⋯)\n              (Nat.rec (fun x => false) (fun n n_ih x => x.1 n) tail_ih.1\n                (Nat.rec ⟨fun x => Nat.rec (fun x => true) (fun n n_ih x => true) x PUnit.unit, PUnit.unit⟩\n                  (fun n n_ih => ⟨fun x => Nat.rec (fun x => false) (fun n_1 n_ih x => x.1 n_1) x n_ih, n_ih⟩)\n                  (Food.rec 0 1 (Person.rec Food.pizza Food.hotdog Food.pizza head)))))),\n        tail_ih⟩)\n    (choice ⋯).1).1",
   "level": "info"}],
 "inputs":
 [["Impossibility.PrimcodableBasic:deps",
   [["deps",
     [["Impossibility/Impossibility:extraDep",
       [["@Impossibility:extraDep", "1723"]]],
      ["import oleans",
       [["Mathlib.Data.Fintype.Basic:olean",
         [["Mathlib.Data.Fintype.Basic:deps", "6560533830482454217"],
          ["/Users/richardzandi/Impossibility/.lake/packages/mathlib/.lake/build/lib/lean/Mathlib/Data/Fintype/Basic.olean",
           "14172197325554752096"]]],
        ["Mathlib.Algebra.Order.Ring.Nat:olean",
         [["Mathlib.Algebra.Order.Ring.Nat:deps", "2942964422524717421"],
          ["/Users/richardzandi/Impossibility/.lake/packages/mathlib/.lake/build/lib/lean/Mathlib/Algebra/Order/Ring/Nat.olean",
           "3021928034840861117"]]],
        ["Mathlib.Data.Finset.Basic:olean",
         [["Mathlib.Data.Finset.Basic:deps", "412641705455185827"],
          ["/Users/richardzandi/Impossibility/.lake/packages/mathlib/.lake/build/lib/lean/Mathlib/Data/Finset/Basic.olean",
           "10790584821528555652"]]],
        ["Mathlib.Tactic.FinCases:olean",
         [["Mathlib.Tactic.FinCases:deps", "5212504834969355894"],
          ["/Users/richardzandi/Impossibility/.lake/packages/mathlib/.lake/build/lib/lean/Mathlib/Tactic/FinCases.olean",
           "13968968894442251546"]]],
        ["Mathlib.Data.Fintype.Prod:olean",
         [["Mathlib.Data.Fintype.Prod:deps", "14910895877986808828"],
          ["/Users/richardzandi/Impossibility/.lake/packages/mathlib/.lake/build/lib/lean/Mathlib/Data/Fintype/Prod.olean",
           "15037415844113523725"]]],
        ["Mathlib.Data.Nat.Pairing:olean",
         [["Mathlib.Data.Nat.Pairing:deps", "12594177570103216149"],
          ["/Users/richardzandi/Impossibility/.lake/packages/mathlib/.lake/build/lib/lean/Mathlib/Data/Nat/Pairing.olean",
           "10281205536376970938"]]],
        ["Mathlib.Tactic.DeriveFintype:olean",
         [["Mathlib.Tactic.DeriveFintype:deps", "11715030553512399480"],
          ["/Users/richardzandi/Impossibility/.lake/packages/mathlib/.lake/build/lib/lean/Mathlib/Tactic/DeriveFintype.olean",
           "13511490884001763137"]]],
        ["Mathlib.Tactic:olean",
         [["Mathlib.Tactic:deps", "12341386301006020440"],
          ["/Users/richardzandi/Impossibility/.lake/packages/mathlib/.lake/build/lib/lean/Mathlib/Tactic.olean",
           "2623972052971590783"]]]]]]],
    ["libs",
     [["import dynlibs", "1723"],
      ["package external libraries", "1723"],
      ["module dynlibs", "1723"],
      ["module plugins", "1723"]]]]],
  ["Lean 4.20.0, commit 77cfc4d1a4f6ef6651792b781eaa6676b4f3f060",
   "16311077432335102250"],
  ["Module.leanArgs: #[]", "1723"],
  ["/Users/richardzandi/Impossibility/Impossibility/PrimcodableBasic.lean",
   "15952435229596803418"]],
 "depHash": "5591358963048551064"}