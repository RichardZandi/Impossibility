import Mathlib.Data.Fintype.Basic
import Mathlib.Computability.Partrec
import Mathlib.Logic.Equiv.Basic
import Mathlib.Data.Fin.Basic
import Mathlib.Data.Vector.Basic
import Impossibility.Arrow.ArrowTypes
import Mathlib.Data.List.Sort
import Mathlib.Data.List.Perm.Basic
import Mathlib.Data.List.OfFn
import Mathlib.Data.List.Basic
import Mathlib.Tactic
import Mathlib.Data.List.Defs

namespace EncodeBasic

noncomputable
instance primcodablePiFin
    {α β : Type*} [Fintype α] [Primcodable β] :
    Primcodable (α → β) :=
by
  let k : ℕ := Fintype.card α
  let eα : α ≃ Fin k := Fintype.equivFin α
  let e : (α → β) ≃ (Fin k → β) :=
    { toFun   := fun f i => f (eα.symm i)
    , invFun  := fun g a => g (eα a)
    , left_inv  := by
        intro f; funext a; simp [eα.symm_apply_apply]
    , right_inv := by
        intro g; funext i; simp [eα.apply_symm_apply] }
  exact Primcodable.ofEquiv _ e


end EncodeBasic


open Fin
open ArrowTypes
open List
open Classical
open Vector
open List Nat
open List.Perm

variable {σ : Type} [Fintype σ] [DecidableEq σ]

/-! ### 1  Canonical reference vector ----------------------------------- -/

/-- `0,1,…,card σ − 1` as a vector (no lists in the API). -/
noncomputable def refVec : _root_.Vector σ (Fintype.card σ) :=
  Vector.ofFn (fun i ↦ (Fintype.equivFin σ).symm i)

/-! ### 2  Ranking record (vector-only fields) -------------------------- -/

structure Ranking (σ) [Fintype σ] where
  vec      : _root_.Vector σ (Fintype.card σ)
  nodup    : vec.toList.Nodup
  complete : vec.Perm (refVec (σ := σ))

namespace Ranking

/-! ### 3  Encode / decode --------------------------------------------- -/

/-- encode a preference as a canonicalised permutation vector -/
noncomputable def encodePref (p : pref_order σ) :
    _root_.Vector σ (Fintype.card σ) := by
  let base : List σ := (refVec (σ := σ)).toList
  let r    : σ → σ → Prop := p.R
  haveI   : DecidableRel r := Classical.decRel _
  let sorted : List σ := base.insertionSort r
  have hlen : sorted.length = Fintype.card σ := by
    have h₁ : sorted.length = base.length :=
      List.length_insertionSort (r := r) (l := base)
    have h₂ : base.length = Fintype.card σ := by
      simpa [base, refVec, Vector.toList_ofFn,
             List.length_map, List.length_finRange] using rfl
    simpa [h₁, h₂]
  let A : Array σ := sorted.toArray
  have hsize : A.size = Fintype.card σ := by
    dsimp [A]; simpa [hlen]
  exact ⟨A, hsize⟩

private lemma encodePref_perm_ref (p : pref_order σ) :
    (encodePref (σ := σ) p).Perm (refVec (σ := σ)) := by
  have hList :
      (encodePref (σ := σ) p).toList ~ (refVec (σ := σ)).toList := by
    simpa [encodePref, refVec, List.toList_toArray]
      using List.perm_insertionSort
            (r := p.R) ((refVec (σ := σ)).toList)
  simpa using (Vector.perm_iff_toList_perm).2 hList


/-- convert a `Ranking` back to a `pref_order`. -/
def toPref (r : Ranking σ) : pref_order σ :=
{ R      := fun a b ↦
    (r.vec.toList.indexOf a) ≤ (r.vec.toList.indexOf b),
  refl   := by intro a; simp,
  total  := by intro a b; exact (Nat.le_total _ _),
  trans  := by intro a b c; exact Nat.le_trans }

/-! ### 4  Packaging the equivalence ----------------------------------- -/

noncomputable def ofPref (p : pref_order σ) : Ranking σ := by
  let v : _root_.Vector σ (Fintype.card σ) := encodePref p

  have perm : v.Perm (refVec (σ := σ)) :=
    encodePref_perm_ref (σ := σ) p

  have nodupOfFn :
      (List.ofFn (fun i : Fin (Fintype.card σ) =>
        (Fintype.equivFin σ).symm i)).Nodup :=
    (List.nodup_ofFn
      (f := fun i : Fin (Fintype.card σ) =>
               (Fintype.equivFin σ).symm i)
    ).mpr
      ((Fintype.equivFin σ).symm.injective)

  have nodupRef : (refVec (σ := σ)).toList.Nodup := by
    simpa [refVec, Vector.toList_ofFn] using nodupOfFn

  have nodup : v.toList.Nodup := by
    have permList := (Vector.perm_iff_toList_perm).1 perm
    exact (permList.nodup_iff).mpr nodupRef

  exact ⟨v, nodup, perm⟩

attribute [ext] pref_order

inductive Name where
  | Alice | Bob | Carl | Dawn | Emma
deriving DecidableEq, Repr, BEq

open Name

def rank : Name → Nat
  | .Alice => 0 | .Bob => 1 | .Carl => 2 | .Dawn => 3 | .Emma => 4

def alphaOrder (a b : Name) : Prop := rank a ≤ rank b

def l : List Name := [Alice, Bob, Carl, Dawn, Emma]

-- 4.  `l` is sorted by `alphaOrder`
lemma l_sorted : l.Sorted alphaOrder := by
  simp [l, alphaOrder, rank, List.Sorted, List.Pairwise]      -- succeeds



lemma List.eq_of_indexOf_eq
    {α : Type _} [DecidableEq α]
    {l : List α} (hN : l.Nodup)
    {x y : α} (hx : x ∈ l) (hy : y ∈ l)
    (hIdx : l.indexOf x = l.indexOf y) : x = y := by
  classical
  -- same index ⇒ same position in the `Fin` view
  have hxFin : l.indexOf x < l.length := by
    simpa using List.indexOf_lt_length (a := x) (l := l) hx
  have hyFin : l.indexOf y < l.length := by
    simpa [hIdx] using List.indexOf_lt_length (a := y) (l := l) hy
  have hxGet : l.get ⟨l.indexOf x, hxFin⟩ = x := by
    simpa using List.get_indexOf hx
  have hyGet : l.get ⟨l.indexOf y, hyFin⟩ = y := by
    simpa [hIdx] using List.get_indexOf hy
  have : l.get ⟨l.indexOf x, hxFin⟩ = y := by
    simpa [hIdx] using hyGet
  simpa [hxGet] using this


lemma mem_refVec {σ} [Fintype σ] (a : σ) :
    a ∈ (refVec (σ := σ)).toList := by
  dsimp [refVec, Vector.toList_ofFn]
  let f : Fin (Fintype.card σ) → σ :=
    fun i ↦ (Fintype.equivFin σ).symm i
  have : a ∈ List.ofFn f := by
    have : f (Fintype.equivFin σ a) = a := by simp [f]
    simpa [List.mem_ofFn, f] using ⟨_, this⟩
  simpa [f]

/-- Transport “membership” across a `Vector` permutation. -/
lemma vector_perm_mem_iff {α n} {v w : _root_.Vector α n}
    (h : _root_.Vector.Perm v w) (a : α) :
    (a ∈ v.toList) ↔ (a ∈ w.toList) := by
  -- mathlib4 already provides the conversion:
  -- (Vector.perm_iff_toList_perm).1 h : List.Perm v.toList w.toList
  have hList : List.Perm v.toList w.toList :=
    (Vector.perm_iff_toList_perm).1 h
  simpa using hList.mem_iff

lemma mem_of_complete {σ} [Fintype σ] (r : Ranking σ) (a : σ) :
    a ∈ r.vec.toList := by
  -- `a` certainly appears in the canonical reference list
  have href : a ∈ (refVec (σ := σ)).toList := mem_refVec a
  -- transport that fact across the permutation stored in `r.complete`
  exact (vector_perm_mem_iff r.complete a).mpr href

private lemma Sorted.imp {α} {r s : α → α → Prop}
    {l : List α} (h : Sorted r l)
    (hmono : ∀ a b, r a b → s a b) :
    Sorted s l := by
  -- `Sorted r l` is exactly `Pairwise r l`:
  --   `Sorted r l`  ↔  `Pairwise r l`
  have : Pairwise r l := h
  have : Pairwise s l := this.imp (by
    intro a b h₁; exact hmono _ _ h₁)
  simpa [Sorted] using this



private lemma sorted_P_implies_sorted_R
    {p : lin_pref_order σ} {l : List σ}
    (h : Sorted (fun a b ↦ P (p : pref_order σ) a b) l) :
    Sorted p.R l :=
  Sorted.imp h (by
    intro a b hP; exact hP.1)


/- THESE HELPER LEMMAS WORKS-/
#check sorted_P_implies_sorted_R
#check Sorted.imp
#check mem_of_complete
#check vector_perm_mem_iff
#check mem_refVec
#check List.eq_of_indexOf_eq

/-THESE WORK-/
#check List.get_idxOf
#check List.Sorted.nodup
#check List.Sorted.cons
#check List.Pairwise.cons
#check List.get_idxOf
#check List.pairwise_iff_get
#check List.indexOf_lt_length
#check List.get_indexOf

/-THESE DO NOT WORK-/
-- #check List.idxOf_eq_some
-- #check List.idxOf_lt_length
-- #check List.mem_take_iff
-- #check List.mem_drop_iff
-- #check List.nthLe_idxOf
-- #check List.nthLe_get
-- #check List.idxOf_le_idxOf
-- #check List.idxOf_lt_idxOf
-- #check List.idxOf_monotone
-- #check List.Sorted.rel_nthLe_of_lt
-- #check List.Pairwise.rel_nthLe_of_lt,
-- #check List.nthLe
-- #check List.nthLe_mem
-- #check List.nthLe_length
-- #check List.nthLe_take
-- #check List.indexOf_eq_some
-- #check List.indexOf_le_indexOf
-- #check List.indexOf_lt_indexOf
-- #check List.indexOf_monotone
-- #check List.get_take
-- #check List.mem_take
-- #check List.mem_drop
-- #check List.Sorted.rel_nthLe_of_lt
-- #check List.Pairwise.rel_nthLe_of_lt



/-- stub — prove later -/
private lemma Vector.perm_eq_of_nodup {α n}
    {w v : _root_.Vector α n} (h : w.Perm v) (hv : v.toList.Nodup) : w = v := by
  sorry


private lemma Ranking.eq_of_vec_eq {σ} [Fintype σ]
    {r₁ r₂ : Ranking σ} (h : r₁.vec = r₂.vec) : r₁ = r₂ := by
  cases r₁; cases r₂; cases h; rfl

private lemma nodup_refVec {σ} [Fintype σ] :
    (refVec (σ := σ)).toList.Nodup := by
  sorry


lemma indexOf_le_indexOf
    {α : Type*} [DecidableEq α] {r : α → α → Prop}
    (antisymm : ∀ {x y : α}, r x y → r y x → x = y)
    {l : List α} (hSorted : l.Sorted r) (hNodup : l.Nodup)
    {a b : α} (ha : a ∈ l) (hb : b ∈ l) :
    l.indexOf a ≤ l.indexOf b ↔ r a b := by
  -- proof to be filled in later
  sorry



attribute [ext] lin_pref_order

noncomputable def equivPref : ArrowTypes.lin_pref_order σ ≃ Ranking σ where
  toFun   := fun p => ofPref (p : pref_order σ)

  invFun := fun r =>
    by
      -- recover the underlying weak order from the `Ranking`
      let pr : pref_order σ := toPref r
      -- build the linear preference order, supplying antisymmetry
      exact
        { R      := pr.R
          , refl  := pr.refl
          , total := pr.total
          , trans := pr.trans
          , antisymm := by
              intro x y hxy hyx                    -- x ≤ y ≤ x
              -- same position in the ranking vector ⇒ equal elements
              have hIdx :
                  (r.vec.toList).indexOf x = (r.vec.toList).indexOf y :=
                Nat.le_antisymm hxy hyx
              have hx : x ∈ r.vec.toList := mem_of_complete r x
              have hy : y ∈ r.vec.toList := mem_of_complete r y
              exact List.eq_of_indexOf_eq r.nodup hx hy hIdx }

  left_inv := by
    intro p
    ext a b
    set L : List σ := (encodePref (p : pref_order σ)).toList with hL
    have hPermVec := encodePref_perm_ref (p : pref_order σ) (σ := σ)
    have ha : a ∈ L := by
      have : a ∈ (refVec (σ := σ)).toList := mem_refVec a
      simpa [hL] using (vector_perm_mem_iff hPermVec a).2 this
    have hb : b ∈ L := by
      have : b ∈ (refVec (σ := σ)).toList := mem_refVec b
      simpa [hL] using (vector_perm_mem_iff hPermVec b).2 this
    have hSorted : L.Sorted p.R := by
      simpa [hL, encodePref] using
        List.sorted_insertionSort
          (l := (refVec (σ := σ)).toList)
          (r := p.R)
    have hNodup : L.Nodup := by
      have hPermList : List.Perm L (refVec (σ := σ)).toList :=
        (Vector.perm_iff_toList_perm).1 hPermVec
      exact (hPermList.nodup_iff).mpr nodup_refVec
    have hIdx :=
      indexOf_le_indexOf
        (antisymm := by
          intro x y hxy hyx; exact p.antisymm hxy hyx)
        hSorted hNodup ha hb
    simpa [hL] using hIdx

  right_inv := by
    rintro ⟨v, hN, hP⟩
    set w := encodePref (toPref ⟨v, hN, hP⟩) with hw
    have hPerm : w.Perm v := by
      have h₁ : w.Perm (refVec (σ := σ)) :=
        encodePref_perm_ref (toPref ⟨v, hN, hP⟩)
      exact h₁.trans hP.symm
    have hEqVec : w = v := Vector.perm_eq_of_nodup hPerm hN      -- (your stub)
    have : ofPref (toPref ⟨v, hN, hP⟩) = (⟨v, hN, hP⟩ : Ranking σ) := by
      apply Ranking.eq_of_vec_eq           -- helper proved earlier
      simpa [ofPref, hw, hEqVec]
    simpa using this



end Ranking

/-! ### 5  Computable instances ---------------------------------------- -/

set_option diagnostics true

variable {σ : Type*} [Fintype σ] [DecidableEq σ]


noncomputable
instance prefOrderPrimcodable : Primcodable (pref_order σ) :=
  (Primcodable.ofEquiv _ (Ranking.equivPref (σ := σ))).symm

noncomputable
instance Profile.primcodable {ι}
    [Fintype ι] :
    Primcodable (ι → pref_order σ) :=

  EncodeBasic.primcodablePiFin




=========
namespace ArrowTypes

universe u
variables {σ : Type u}


/-- Weak preference order (reflexive, total, transitive). -/
structure pref_order (σ : Type u) :=
(R      : σ → σ → Prop)
(refl   : ∀ x, R x x)
(total  : ∀ x y, R x y ∨ R y x)
(trans  : ∀ x y z, R x y → R y z → R x z)

/-- Strict preference derived from `R`. -/
def P {σ} (r : pref_order σ) (x y : σ) : Prop :=
r.R x y ∧ ¬ r.R y x

/-- `b` is strictly best inside finite set `X` w.r.t. order `r`. -/
def is_strictly_best  {σ} (b : σ) (r : pref_order σ) (X : Finset σ) : Prop :=
∀ a ∈ X, a ≠ b → P r b a

/-- `b` is strictly worst inside `X`. -/
def is_strictly_worst {σ} (b : σ) (r : pref_order σ) (X : Finset σ) : Prop :=
∀ a ∈ X, a ≠ b → P r a b

/-- Either strictly best or strictly worst. -/
def is_extremal     {σ} (b : σ) (r : pref_order σ) (X : Finset σ) : Prop :=
is_strictly_worst b r X ∨ is_strictly_best b r X

def same_order {σ} (r₁ r₂ : pref_order σ) (x y : σ) : Prop :=
(P r₁ x y ∧ P r₂ x y) ∨ (P r₁ y x ∧ P r₂ y x)

def constTrue {σ} : pref_order σ :=
{ R      := λ _ _ => True,
  refl   := by intro; trivial,
  total  := by intro _ _; exact Or.inl trivial,
  trans  := by intro _ _ _ _ _; trivial }



/-- **Linear** (strict) preference order: weak order **plus antisymmetry**. -/
structure lin_pref_order (σ : Type) extends pref_order σ :=
(antisymm : ∀ {x y}, R x y → R y x → x = y)

/-- Coercion: every `lin_pref_order` is a `pref_order` by forgetting `antisymm`. -/
instance : Coe (lin_pref_order σ) (pref_order σ) where
  coe p := { R := p.R, refl := p.refl, total := p.total, trans := p.trans }

/-- Strict relation of a linear preference. -/
@[inline] def linP (p : lin_pref_order σ) : σ → σ → Prop :=
  fun x y ↦ p.R x y ∧ ¬ p.R y x

/-- Totality and transitivity hold for the **weak** relation `p.R` that is
built into every `pref_order`.  We register type‑class instances so that
`tactic` lemmas such as `sorted_insertionSort` can use them. -/
instance (p : lin_pref_order σ) : IsTotal σ p.R where
  total := p.total

instance (p : lin_pref_order σ) : IsTrans σ p.R where
  trans := p.trans

end ArrowTypes
